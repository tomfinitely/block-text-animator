<?xml version="1.0" encoding="UTF-8"?>
<artefact name="Text Animator" slug="text-animator" type="code-package" schemaVersion="2">
  <file path="readme.txt">
    <description>This file contains the readme information for the block. It is used to provide information about the block, its usage, and any other relevant details.</description>
    <content><![CDATA[
=== Text Animator ===

Contributors:      WordPress Telex
Tags:              block, animation, text, typewriter, effects
Tested up to:      6.8
Stable tag:        0.1.0
License:           GPLv2 or later
License URI:       https://www.gnu.org/licenses/gpl-2.0.html

Create engaging animated text that cycles through different strings with various visual effects.

== Description ==

The Text Animator block allows you to create dynamic, animated text content that cycles through multiple strings with stunning visual effects. Perfect for hero sections, call-to-action areas, or any place where you want to grab attention with animated text.

Features:
* Multiple animation effects: typewriter, matrix scramble, fade transitions, flash, burst
* Configurable prefix and suffix text
* Inline text editing directly in the block
* Customizable animation speed and timing
* Theme-friendly styling that inherits typography
* Responsive and accessible design

Animation Effects:
* **Typewriter**: Classic terminal-style typing effect
* **Matrix**: Character scrambling reminiscent of the Matrix movies
* **Fade**: Smooth fade in/out transitions between text strings
* **Flash**: Quick flash transition effect
* **Burst**: Explosive burst animation with scaling effects

The block is designed to inherit your theme's typography and styling while providing just enough visual polish to make the animations shine.

== Installation ==

1. Upload the plugin files to the `/wp-content/plugins/text-animator` directory, or install the plugin through the WordPress plugins screen directly.
1. Activate the plugin through the 'Plugins' screen in WordPress
1. Add the Text Animator block to any post or page
1. Start typing your animated text strings directly in the block
1. Configure animation effects and timing in the block settings

== Frequently Asked Questions ==

= How do I add multiple text strings to animate between? =

Simply click on the text in the block and type your strings, pressing Enter to create new lines. Each line will become a separate text string in the animation cycle.

= Can I control the animation speed? =

Yes! In the block settings panel, you can adjust the animation duration and delay between text swaps to match your desired pacing.

= Will this work with my theme? =

Absolutely! The block is designed to inherit your theme's typography, colors, and spacing. It adds minimal styling to ensure the animations work properly while respecting your theme's design.

= Is the block accessible? =

Yes, the block includes proper ARIA labels and respects user preferences for reduced motion when that setting is enabled in their browser.

== Screenshots ==

1. Text Animator block in the editor showing inline editing capabilities
2. Animation effect selection in the block settings
3. Live preview of the typewriter effect
4. Matrix scramble effect in action

== Changelog ==

= 0.1.0 =
* Initial release with 5 animation effects
* Inline text editing
* Configurable prefix/suffix text
* Theme-friendly styling
* Accessibility support

== Upgrade Notice ==

= 0.1.0 =
Initial release of the Text Animator block.
]]></content>
  </file>
  <file path="text-animator.php">
    <description>This file contains the block registration code in the form of a single block plugin. Any other plugin related functionality should be added to this file. All block rendering functionality should go to the `render.php` file.</description>
    <content><![CDATA[<?php
/**
 * Plugin Name:       Text Animator
 * Description:       Create engaging animated text that cycles through different strings with various visual effects.
 * Version:           0.1.0
 * Requires at least: 6.1
 * Requires PHP:      7.4
 * Author:            WordPress Telex
 * License:           GPLv2 or later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       text-animator
 *
 * @package TextAnimator
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

/**
 * Registers the block using the metadata loaded from the `block.json` file.
 * Behind the scenes, it registers also all assets so they can be enqueued
 * through the block editor in the corresponding context.
 *
 * @see https://developer.wordpress.org/reference/functions/register_block_type/
 */
function text_animator_text_animator_block_init() {
	register_block_type( __DIR__ . '/build/' );
}
add_action( 'init', 'text_animator_text_animator_block_init' );
]]></content>
  </file>
  <file path="src/block.json">
    <description>This file contains metadata about the block including its name, title, category, icon, and other properties. The icon is a WordPress Dashicon name (e.g., "admin-post", "format-aside", "admin-page"). Do not use any icon that's not in the list under any circustamce. These are the only slugs available:
	
	menu menu-alt menu-alt2 menu-alt3 admin-site admin-site-alt admin-site-alt2 admin-site-alt3 dashboard admin-post admin-media admin-links admin-page admin-comments admin-appearance admin-plugins plugins-checked admin-users admin-tools admin-settings admin-network admin-home admin-generic admin-collapse filter admin-customizer admin-multisite welcome-write-blog welcome-add-page welcome-view-site welcome-widgets-menus welcome-comments welcome-learn-more format-aside format-image format-gallery format-video format-status format-quote format-chat format-audio camera camera-alt images-alt images-alt2 video-alt video-alt2 video-alt3 media-archive media-audio media-code media-default media-document media-interactive media-spreadsheet media-text media-video playlist-audio playlist-video controls-play controls-pause controls-forward controls-skipforward controls-back controls-skipback controls-repeat controls-volumeon controls-volumeoff image-crop image-rotate image-rotate-left image-rotate-right image-flip-vertical image-flip-horizontal image-filter undo redo database-add database database-export database-import database-remove database-view align-full-width align-pull-left align-pull-right align-wide block-default button cloud-saved cloud-upload columns cover-image ellipsis embed-audio embed-generic embed-photo embed-post embed-video exit heading html info-outline insert insert-after insert-before remove saved shortcode table-col-after table-col-before table-col-delete table-row-after table-row-before table-row-delete editor-bold editor-italic editor-ul editor-ol editor-ol-rtl editor-quote editor-alignleft editor-aligncenter editor-alignright editor-insertmore editor-spellcheck editor-expand editor-contract editor-kitchensink editor-underline editor-justify editor-textcolor editor-paste-word editor-paste-text editor-removeformatting editor-video editor-customchar editor-outdent editor-indent editor-help editor-strikethrough editor-unlink editor-rtl editor-ltr editor-break editor-code editor-paragraph editor-table align-left align-right align-center align-none lock unlock calendar calendar-alt visibility hidden post-status edit trash sticky external arrow-up arrow-down arrow-right arrow-left arrow-up-alt arrow-down-alt arrow-right-alt arrow-left-alt arrow-up-alt2 arrow-down-alt2 arrow-right-alt2 arrow-left-alt2 sort leftright randomize list-view excerpt-view grid-view move share share-alt share-alt2 rss email email-alt email-alt2 networking amazon facebook facebook-alt google instagram linkedin pinterest podio reddit spotify twitch twitter twitter-alt whatsapp xing youtube hammer art migrate performance universal-access universal-access-alt tickets nametag clipboard heart megaphone schedule tide rest-api code-standards buddicons-activity buddicons-bbpress-logo buddicons-buddypress-logo buddicons-community buddicons-forums buddicons-friends buddicons-groups buddicons-pm buddicons-replies buddicons-topics buddicons-tracking wordpress wordpress-alt pressthis update update-alt screenoptions info cart feedback cloud translation tag category archive tagcloud text bell yes yes-alt no no-alt plus plus-alt plus-alt2 minus dismiss marker star-filled star-half star-empty flag warning location location-alt vault shield shield-alt sos search slides text-page analytics chart-pie chart-bar chart-line chart-area groups businessman businesswoman businessperson id id-alt products awards forms testimonial portfolio book book-alt download upload backup clock lightbulb microphone desktop laptop tablet smartphone phone index-card carrot building store album palmtree tickets-alt money money-alt smiley thumbs-up thumbs-down layout paperclip color-picker edit-large edit-page airplane bank beer calculator car coffee drumstick food fullscreen-alt fullscreen-exit-alt games hourglass open-folder pdf pets printer privacy superhero superhero-alt</description>
    <content><![CDATA[{
	"$schema": "https://schemas.wp.org/trunk/block.json",
	"apiVersion": 3,
	"name": "telex/block-text-animator",
	"version": "0.1.0",
	"title": "Text Animator",
	"category": "text",
	"icon": "editor-textcolor",
	"description": "Create engaging animated text that cycles through different strings with various visual effects.",
	"example": {
		"attributes": {
			"prefix": "Say ",
			"suffix": " to everyone!",
			"animationType": "typewriter",
			"layout": "row"
		},
		"innerBlocks": [
			{
				"name": "telex/text-animator-item",
				"attributes": { "text": "Welcome" }
			},
			{
				"name": "telex/text-animator-item",
				"attributes": { "text": "Hello" }
			},
			{
				"name": "telex/text-animator-item",
				"attributes": { "text": "Greetings" }
			}
		]
	},
	"attributes": {
		"prefix": {
			"type": "string",
			"default": ""
		},
		"suffix": {
			"type": "string",
			"default": ""
		},
		"animationType": {
			"type": "string",
			"default": "typewriter"
		},
		"animationDuration": {
			"type": "number",
			"default": 1000
		},
		"displayDuration": {
			"type": "number",
			"default": 2000
		},
		"layout": {
			"type": "string",
			"default": "row"
		}
	},
	"providesContext": {
		"textAnimator/animationType": "animationType",
		"textAnimator/layout": "layout"
	},
	"supports": {
		"html": false,
		"align": ["left", "center", "right", "wide", "full"],
		"alignWide": true,
		"anchor": true,
		"__experimentalLayout": {
			"allowSwitching": false,
			"allowInheriting": false,
			"default": {
				"type": "constrained"
			}
		},
		"dimensions": {
			"minHeight": true,
			"aspectRatio": true
		},
		"__experimentalBorder": {
			"color": true,
			"radius": true,
			"style": true,
			"width": true,
			"__experimentalDefaultControls": {
				"color": true,
				"radius": true,
				"style": true,
				"width": true
			}
		},
		"position": {
			"sticky": true
		},
		"spacing": {
			"margin": true,
			"padding": true,
			"blockGap": true,
			"__experimentalDefaultControls": {
				"margin": false,
				"padding": false,
				"blockGap": false
			}
		},
		"typography": {
			"fontSize": true,
			"lineHeight": true,
			"__experimentalFontFamily": true,
			"__experimentalFontWeight": true,
			"__experimentalTextTransform": true,
			"__experimentalLetterSpacing": true,
			"__experimentalWritingMode": true,
			"__experimentalTextOrientation": true,
			"__experimentalDefaultControls": {
				"fontSize": true
			}
		},
		"color": {
			"text": true,
			"background": true,
			"gradients": true,
			"link": true,
			"__experimentalDefaultControls": {
				"background": true,
				"text": true
			}
		},
		"__experimentalSelector": ".wp-block-telex-block-text-animator"
	},
	"textdomain": "text-animator",
	"editorScript": "file:./index.js",
	"editorStyle": "file:./index.css",
	"style": "file:./style-index.css",
	"viewScript": "file:./view.js",
	"render": "file:./render.php"
}]]></content>
  </file>
  <file path="src/index.js">
    <description>This file registers the block, specifies the edit and save functions, and loads the block's metadata</description>
    <content><![CDATA[/**
 * Registers a new block provided a unique name and an object defining its behavior.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/
 */
import { registerBlockType } from '@wordpress/blocks';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * All files containing `style` keyword are bundled together. The code used
 * gets applied both to the front of your site and to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './style.scss';

/**
 * Internal dependencies
 */
import Edit from './edit';
import EditItem from './edit-item';
import SaveItem from './save-item';
import metadata from './block.json';

/**
 * Every block starts by registering a new block type definition.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/
 */
registerBlockType( metadata.name, {
	/**
	 * @see ./edit.js
	 */
	edit: Edit,
} );

/**
 * Register the text animator item block
 */
registerBlockType( 'telex/text-animator-item', {
	title: 'Text Animation Item',
	category: 'text',
	icon: 'editor-textcolor',
	description: 'Individual text item for the Text Animator block.',
	parent: ['telex/block-text-animator'],
	attributes: {
		text: {
			type: 'string',
			default: '',
			source: 'html',
			selector: '.text-animator-item__content',
		}
	},
	usesContext: [
		'textAnimator/animationType',
		'textAnimator/layout'
	],
	supports: {
		html: false,
		inserter: false,
		reusable: false,
		lock: false
	},
	edit: EditItem,
	save: SaveItem,
} );]]></content>
  </file>
  <file path="src/edit.js">
    <description>This file contains the edit function for the block which is responsible for rendering the block in the editor.</description>
    <content><![CDATA[/**
 * Retrieves the translation of text.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/
 */
import { __ } from '@wordpress/i18n';

/**
 * React hook that is used to mark the block wrapper element.
 * It provides all the necessary props like the class name.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops
 */
import { 
	useBlockProps, 
	InspectorControls,
	InnerBlocks,
	useInnerBlocksProps,
	store as blockEditorStore
} from '@wordpress/block-editor';

import {
	PanelBody,
	SelectControl,
	RangeControl,
	TextControl,
	Button
} from '@wordpress/components';

import { useState, useEffect } from '@wordpress/element';
import { useSelect, useDispatch } from '@wordpress/data';
import { createBlock } from '@wordpress/blocks';
import { plus } from '@wordpress/icons';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * Those files can contain any CSS code that gets applied to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './editor.scss';

const ALLOWED_BLOCKS = ['telex/text-animator-item'];

const TEMPLATE = [
	['telex/text-animator-item', { text: 'Your text here' }],
	['telex/text-animator-item', { text: 'Add more text' }],
	['telex/text-animator-item', { text: 'For animation' }]
];

/**
 * The edit function describes the structure of your block in the context of the
 * editor. This represents what the editor will render when the block is used.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit
 *
 * @return {Element} Element to render.
 */
export default function Edit({ attributes, setAttributes, clientId }) {
	const { 
		prefix, 
		suffix, 
		animationType, 
		animationDuration, 
		displayDuration,
		layout
	} = attributes;

	const [currentIndex, setCurrentIndex] = useState(0);
	const [displayText, setDisplayText] = useState('');

	// Get inner blocks to extract text strings
	const { innerBlocks, hasInnerBlocks } = useSelect(
		(select) => ({
			innerBlocks: select(blockEditorStore).getBlocks(clientId),
			hasInnerBlocks: select(blockEditorStore).getBlocks(clientId).length > 0,
		}),
		[clientId]
	);

	const { insertBlock } = useDispatch(blockEditorStore);

	const textStrings = innerBlocks.map(block => block.attributes.text || '').filter(text => text.trim());

	const blockProps = useBlockProps({
		ClassName: `text-animator text-animator--${animationType} text-animator--layout-${layout}`
	});

	const innerBlocksProps = useInnerBlocksProps(
		{
			className: `text-animator__items text-animator__items--${layout}`
		},
		{
			allowedBlocks: ALLOWED_BLOCKS,
			template: TEMPLATE,
			templateInsertUpdatesSelection: false,
			orientation: layout === 'column' ? 'vertical' : 'horizontal',
			renderAppender: false, // We'll render our own appender
		}
	);

	// Simple preview animation for editor
	useEffect(() => {
		if (textStrings.length === 0) return;

		const interval = setInterval(() => {
			setCurrentIndex((prev) => (prev + 1) % textStrings.length);
		}, displayDuration + animationDuration);

		return () => clearInterval(interval);
	}, [textStrings, displayDuration, animationDuration]);

	// Update display text based on current index
	useEffect(() => {
		if (textStrings[currentIndex]) {
			setDisplayText(textStrings[currentIndex]);
		}
	}, [currentIndex, textStrings]);

	const animationOptions = [
		{ label: __('Typewriter', 'text-animator'), value: 'typewriter' },
		{ label: __('Matrix Scramble', 'text-animator'), value: 'matrix' },
		{ label: __('Fade', 'text-animator'), value: 'fade' },
		{ label: __('Flash', 'text-animator'), value: 'flash' },
		{ label: __('Burst', 'text-animator'), value: 'burst' }
	];

	const layoutOptions = [
		{ label: __('Row (Horizontal)', 'text-animator'), value: 'row' },
		{ label: __('Column (Vertical)', 'text-animator'), value: 'column' }
	];

	const addNewTextItem = () => {
		const newBlock = createBlock('telex/text-animator-item', {
			text: ''
		});
		insertBlock(newBlock, innerBlocks.length, clientId);
	};

	return (
		<>
			<InspectorControls>
				<PanelBody title={__('Layout Settings', 'text-animator')}>
					<SelectControl
						label={__('Layout Direction', 'text-animator')}
						value={layout}
						options={layoutOptions}
						onChange={(value) => setAttributes({ layout: value })}
						help={__('Choose how text items are arranged in the editor.', 'text-animator')}
					/>
				</PanelBody>
				<PanelBody title={__('Animation Settings', 'text-animator')}>
					<SelectControl
						label={__('Animation Type', 'text-animator')}
						value={animationType}
						options={animationOptions}
						onChange={(value) => setAttributes({ animationType: value })}
					/>
					<RangeControl
						label={__('Animation Duration (ms)', 'text-animator')}
						value={animationDuration}
						onChange={(value) => setAttributes({ animationDuration: value })}
						min={200}
						max={3000}
						step={100}
					/>
					<RangeControl
						label={__('Display Duration (ms)', 'text-animator')}
						value={displayDuration}
						onChange={(value) => setAttributes({ displayDuration: value })}
						min={500}
						max={5000}
						step={100}
					/>
				</PanelBody>
				<PanelBody title={__('Text Settings', 'text-animator')}>
					<TextControl
						label={__('Prefix Text', 'text-animator')}
						value={prefix}
						onChange={(value) => setAttributes({ prefix: value })}
						placeholder={__('Text before animation...', 'text-animator')}
					/>
					<TextControl
						label={__('Suffix Text', 'text-animator')}
						value={suffix}
						onChange={(value) => setAttributes({ suffix: value })}
						placeholder={__('Text after animation...', 'text-animator')}
					/>
				</PanelBody>
			</InspectorControls>

			<div {...blockProps}>
				<div className="text-animator__editor-preview">
					<div className="text-animator__content">
						{prefix && (
							<span className="text-animator__prefix">{prefix}</span>
						)}
						<span className="text-animator__animated-text text-animator__preview-text">
							{displayText || (textStrings.length > 0 ? textStrings[0] : __('Add text items below', 'text-animator'))}
						</span>
						{suffix && (
							<span className="text-animator__suffix">{suffix}</span>
						)}
					</div>
					<div className="text-animator__help">
						<small>
							{__('Preview shows current animation. Edit text items below:', 'text-animator')}
						</small>
					</div>
				</div>

				<div className="text-animator__editor-content">
					<div {...innerBlocksProps} />
					
					<div className="text-animator__appender">
						<Button
							className="text-animator__add-item"
							onClick={addNewTextItem}
							variant="secondary"
							icon={plus}
							title={__('Add animation text', 'text-animator')}
						>
							{__('Add Text', 'text-animator')}
						</Button>
					</div>
				</div>
			</div>
		</>
	);
}]]></content>
  </file>
  <file path="src/save.js">
    <description>This file contains the save function for the block which is responsible for creating the static result of rendering the block on the client to display the saved result on the front end.</description>
    <content><![CDATA[
  
	]]></content>
  </file>
  <file path="src/style.scss">
    <description>This file contains styles for the block in the front end.</description>
    <content><![CDATA[/**
 * The following styles get applied both on the front of your site
 * and in the editor.
 *
 * Replace them with your own styles or remove the file completely.
 */

.wp-block-telex-block-text-animator {
	position: relative;
	display: block;
	width: 100%;
	box-sizing: border-box;

	.text-animator__content {
		display: flex;
		flex-wrap: wrap;
		align-items: baseline;
		gap: 0.25em;
		width: 100%;
		box-sizing: border-box;
	}

	.text-animator__prefix,
	.text-animator__suffix {
		display: inline;
	}

	.text-animator__animated-text {
		position: relative;
		display: inline-block;
		min-height: 1.2em;
		min-width: 1ch;
	}

	// Alignment support with proper width constraints
	&.alignleft {
		float: left;
		margin-right: 2em;
		margin-bottom: 1em;
		max-width: 50%;
		clear: left;
	}

	&.alignright {
		float: right;
		margin-left: 2em;
		margin-bottom: 1em;
		max-width: 50%;
		clear: right;
	}

	&.aligncenter {
		margin-left: auto;
		margin-right: auto;
		text-align: center;
		max-width: 100%;
		clear: both;
		
		.text-animator__content {
			justify-content: center;
		}
	}

	&.alignwide {
		max-width: var(--wp--style--global--wide-size, 1280px);
		width: 100%;
		margin-left: auto;
		margin-right: auto;
		clear: both;
	}

	&.alignfull {
		max-width: 100vw;
		width: 100vw;
		position: relative;
		left: 50%;
		right: 50%;
		margin-left: -50vw;
		margin-right: -50vw;
		clear: both;
		box-sizing: border-box;
	}

	// Animation-specific styles
	&.text-animator--typewriter {
		.text-animator__animated-text::after {
			content: '|';
			animation: text-animator-blink 1s infinite;
			opacity: 1;
		}
		
		&.text-animator--typing .text-animator__animated-text::after {
			opacity: 1;
		}
	}

	&.text-animator--matrix {
		.text-animator__animated-text {
			font-family: 'Courier New', monospace;
		}
		
		.text-animator__char {
			display: inline-block;
		}
	}

	&.text-animator--fade {
		.text-animator__animated-text {
			transition: opacity 0.3s ease;
		}
		
		&.text-animator--animating .text-animator__animated-text {
			opacity: 0;
		}
	}

	&.text-animator--flash {
		.text-animator__animated-text {
			transition: opacity 0.1s ease;
		}
		
		&.text-animator--animating .text-animator__animated-text {
			animation: text-animator-flash 0.3s ease;
		}
	}

	&.text-animator--burst {
		.text-animator__animated-text {
			transition: transform 0.3s ease, opacity 0.3s ease;
		}
		
		&.text-animator--animating .text-animator__animated-text {
			animation: text-animator-burst 0.5s ease;
		}
	}
}

// Text animator item block (child blocks) - Hidden on frontend
.wp-block-telex-text-animator-item {
	display: none !important; // These shouldn't render on frontend
}

// Keyframe animations
@keyframes text-animator-blink {
	0%, 50% { opacity: 1; }
	51%, 100% { opacity: 0; }
}

@keyframes text-animator-flash {
	0%, 100% { opacity: 1; }
	50% { opacity: 0; }
}

@keyframes text-animator-burst {
	0% { 
		transform: scale(1) rotateX(0deg);
		opacity: 1;
	}
	25% { 
		transform: scale(1.1) rotateX(90deg);
		opacity: 0.5;
	}
	50% { 
		transform: scale(0.9) rotateX(180deg);
		opacity: 0;
	}
	75% { 
		transform: scale(1.05) rotateX(270deg);
		opacity: 0.5;
	}
	100% { 
		transform: scale(1) rotateX(360deg);
		opacity: 1;
	}
}

// Responsive behavior
@media (max-width: 768px) {
	.wp-block-telex-block-text-animator {
		&.alignleft,
		&.alignright {
			float: none;
			margin-left: auto;
			margin-right: auto;
			max-width: 100%;
		}
		
		&.alignfull {
			left: 0;
			right: 0;
			margin-left: 0;
			margin-right: 0;
			width: 100%;
			max-width: 100%;
		}
	}
}

// Respect user motion preferences
@media (prefers-reduced-motion: reduce) {
	.wp-block-telex-block-text-animator {
		.text-animator__animated-text::after {
			animation: none !important;
		}
		
		&.text-animator--animating .text-animator__animated-text {
			animation: none !important;
			transition: none !important;
			opacity: 1 !important;
			transform: none !important;
		}
	}
}]]></content>
  </file>
  <file path="src/editor.scss">
    <description>This file contains styles for the block in the editor.</description>
    <content><![CDATA[/**
 * The following styles get applied inside the editor only.
 *
 * Replace them with your own styles or remove the file completely.
 */

.wp-block-telex-block-text-animator {
	// Editor preview area
	.text-animator__editor-preview {
		padding: 1.5em;
		border: 2px dashed #ddd;
		border-radius: 6px;
		margin-bottom: 1.5em;
		background: rgba(255, 255, 255, 0.5);
		transition: border-color 0.2s ease;
		text-align: left; // Consistent left alignment

		&:hover {
			border-color: #007cba;
		}
	}

	.text-animator__content {
		display: flex;
		flex-wrap: wrap;
		align-items: baseline;
		gap: 0.25em;
		width: 100%;
		justify-content: flex-start; // Always start from left
	}

	.text-animator__preview-text {
		font-weight: 500;
		color: #007cba;
		font-style: italic;
	}

	.text-animator__help {
		margin-top: 0.75em;
		padding-top: 0.75em;
		border-top: 1px solid #eee;
		font-style: italic;
		color: #666;
		font-size: 0.9em;
		text-align: left; // Consistent left alignment
	}

	// Editor content area
	.text-animator__editor-content {
		position: relative;
		width: 100%;
	}

	// Appender container
	.text-animator__appender {
		margin-top: 1em;
		padding-top: 1em;
		border-top: 1px solid #eee;
		text-align: left; // Ensure button aligns left
	}

	// Add item button
	.text-animator__add-item {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		gap: 0.5em;
		padding: 0.75em 1em;
		border: 2px dashed #ddd;
		border-radius: 4px;
		background: transparent;
		color: #666;
		font-size: 0.9em;
		cursor: pointer;
		transition: all 0.2s ease;
		min-width: 120px;

		&:hover {
			border-color: #007cba;
			background-color: rgba(0, 124, 186, 0.05);
			color: #007cba;
		}

		.dashicon,
		svg {
			fill: currentColor;
			width: 18px;
			height: 18px;
		}
	}

	// Layout-specific styles
	&.text-animator--layout-row {
		.text-animator__items {
			display: flex;
			flex-wrap: wrap;
			gap: 0.75em;
			align-items: stretch;
			width: 100%;
		}
	}

	&.text-animator--layout-column {
		.text-animator__items {
			display: flex;
			flex-direction: column;
			gap: 0.75em;
			width: 100%;
		}
	}

	// Alignment support - ensure the block respects alignment settings
	&.alignleft {
		max-width: 50%;
		margin-right: 2em;
		margin-left: 0;
	}

	&.alignright {
		max-width: 50%;
		margin-left: 2em;
		margin-right: 0;
	}

	&.aligncenter {
		margin-left: auto;
		margin-right: auto;
		
		.text-animator__editor-preview,
		.text-animator__appender {
			text-align: center;
		}
		
		.text-animator__content {
			justify-content: center;
		}
	}

	&.alignwide {
		max-width: var(--wp--style--global--wide-size, 1280px);
		width: 100%;
	}

	&.alignfull {
		max-width: none;
		width: 100vw;
		position: relative;
		left: 50%;
		right: 50%;
		margin-left: -50vw;
		margin-right: -50vw;
	}
}

// Individual text animator items in editor
.wp-block-telex-text-animator-item {
	.text-animator-item__text {
		padding: 0.75em 1em;
		border: 1px solid #ddd;
		border-radius: 4px;
		background: #fff;
		transition: border-color 0.2s ease, box-shadow 0.2s ease;
		min-height: 1.5em;
		display: inline-block;
		min-width: 100px;
		width: 100%;
		box-sizing: border-box;
		font-size: inherit;

		&:focus {
			border-color: #007cba;
			box-shadow: 0 0 0 1px #007cba;
			outline: none;
		}

		&:hover {
			border-color: #999;
		}

		&[data-is-placeholder-visible="true"] {
			color: #999;
			font-style: italic;
		}
	}

	// Column layout styling
	&.text-animator-item--column {
		display: block;
		width: 100%;

		.text-animator-item__text {
			width: 100%;
			box-sizing: border-box;
		}
	}

	// Row layout styling  
	&.text-animator-item--row {
		display: inline-block;
		flex: 1;
		min-width: 120px;
		max-width: none;
	}

	// List view styling
	.block-editor-list-view-block-select-button {
		&::after {
			content: " (" attr(data-text) ")";
			font-style: italic;
			opacity: 0.7;
		}
	}
}]]></content>
  </file>
  <file path="src/view.js">
    <description>This file contains the view function for the block which is responsible for rendering interactive behaviors of the block on the front end. Ideally using the WordPress interactivity API.</description>
    <content><![CDATA[
  /**
 * Text Animator Block - Frontend Animation Controller
 * 
 * Handles all animation effects for the text animator block on the frontend.
 * Respects user motion preferences and provides smooth animations.
 */

document.addEventListener('DOMContentLoaded', function() {
	// Check for reduced motion preference
	const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
	
	// Initialize all text animator blocks
	const textAnimators = document.querySelectorAll('.wp-block-telex-block-text-animator');
	
	textAnimators.forEach(initTextAnimator);
	
	function initTextAnimator(block) {
		const textStrings = JSON.parse(block.dataset.textStrings || '[]');
		const animationType = block.dataset.animationType || 'typewriter';
		const animationDuration = parseInt(block.dataset.animationDuration || '1000');
		const displayDuration = parseInt(block.dataset.displayDuration || '2000');
		
		if (textStrings.length === 0) return;
		
		const animatedTextEl = block.querySelector('.text-animator__animated-text');
		if (!animatedTextEl) return;
		
		let currentIndex = 0;
		let isAnimating = false;
		
		// Start the animation cycle
		startAnimationCycle();
		
		function startAnimationCycle() {
			if (prefersReducedMotion) {
				// For users who prefer reduced motion, just cycle text without animations
				simpleTextCycle();
				return;
			}
			
			// Start with the first text
			showText(textStrings[currentIndex]);
			
			// Set up the main animation loop
			setInterval(() => {
				if (isAnimating) return;
				
				currentIndex = (currentIndex + 1) % textStrings.length;
				animateToNextText(textStrings[currentIndex]);
			}, displayDuration + animationDuration);
		}
		
		function simpleTextCycle() {
			setInterval(() => {
				currentIndex = (currentIndex + 1) % textStrings.length;
				animatedTextEl.textContent = textStrings[currentIndex];
			}, displayDuration);
		}
		
		function animateToNextText(nextText) {
			if (isAnimating) return;
			isAnimating = true;
			block.classList.add('text-animator--animating');
			
			switch (animationType) {
				case 'typewriter':
					typewriterAnimation(nextText);
					break;
				case 'matrix':
					matrixAnimation(nextText);
					break;
				case 'fade':
					fadeAnimation(nextText);
					break;
				case 'flash':
					flashAnimation(nextText);
					break;
				case 'burst':
					burstAnimation(nextText);
					break;
				default:
					showText(nextText);
					endAnimation();
			}
		}
		
		function typewriterAnimation(nextText) {
			const currentText = animatedTextEl.textContent;
			let eraseIndex = currentText.length;
			let typeIndex = 0;
			
			block.classList.add('text-animator--typing');
			
			// Erase current text
			const eraseInterval = setInterval(() => {
				if (eraseIndex > 0) {
					animatedTextEl.textContent = currentText.substring(0, eraseIndex - 1);
					eraseIndex--;
				} else {
					clearInterval(eraseInterval);
					// Start typing new text
					const typeInterval = setInterval(() => {
						if (typeIndex < nextText.length) {
							animatedTextEl.textContent = nextText.substring(0, typeIndex + 1);
							typeIndex++;
						} else {
							clearInterval(typeInterval);
							block.classList.remove('text-animator--typing');
							endAnimation();
						}
					}, 50);
				}
			}, 30);
		}
		
		function matrixAnimation(nextText) {
			const chars = '!@#$%^&*()_+-=[]{}|;:,.<>?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
			const iterations = 20;
			let iteration = 0;
			
			const interval = setInterval(() => {
				const scrambled = nextText
					.split('')
					.map((char, index) => {
						if (index < (nextText.length * iteration) / iterations) {
							return nextText[index];
						}
						return chars[Math.floor(Math.random() * chars.length)];
					})
					.join('');
				
				animatedTextEl.textContent = scrambled;
				
				iteration++;
				if (iteration > iterations) {
					clearInterval(interval);
					animatedTextEl.textContent = nextText;
					endAnimation();
				}
			}, animationDuration / iterations);
		}
		
		function fadeAnimation(nextText) {
			animatedTextEl.style.opacity = '0';
			
			setTimeout(() => {
				animatedTextEl.textContent = nextText;
				animatedTextEl.style.opacity = '1';
				endAnimation();
			}, animationDuration / 2);
		}
		
		function flashAnimation(nextText) {
			let flashes = 0;
			const maxFlashes = 3;
			
			const flashInterval = setInterval(() => {
				animatedTextEl.style.opacity = flashes % 2 === 0 ? '0' : '1';
				flashes++;
				
				if (flashes === Math.floor(maxFlashes * 1.5)) {
					animatedTextEl.textContent = nextText;
				}
				
				if (flashes >= maxFlashes * 2) {
					clearInterval(flashInterval);
					animatedTextEl.style.opacity = '1';
					endAnimation();
				}
			}, animationDuration / (maxFlashes * 2));
		}
		
		function burstAnimation(nextText) {
			animatedTextEl.style.transform = 'scale(1.2) rotateY(90deg)';
			animatedTextEl.style.opacity = '0';
			
			setTimeout(() => {
				animatedTextEl.textContent = nextText;
				animatedTextEl.style.transform = 'scale(1) rotateY(0deg)';
				animatedTextEl.style.opacity = '1';
				endAnimation();
			}, animationDuration / 2);
		}
		
		function showText(text) {
			animatedTextEl.textContent = text;
		}
		
		function endAnimation() {
			isAnimating = false;
			block.classList.remove('text-animator--animating');
			
			// Reset any inline styles
			animatedTextEl.style.opacity = '';
			animatedTextEl.style.transform = '';
		}
	}
});
	]]></content>
  </file>
  <file path="src/render.php">
    <description>This file contains the render callback function for the block, which is responsible for rendering the block content on the front end. A render function should exist only if the block is dynamic.</description>
    <content><![CDATA[<?php
/**
 * @see https://github.com/WordPress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#render
 */

$prefix = $attributes['prefix'] ?? '';
$suffix = $attributes['suffix'] ?? '';
$animation_type = $attributes['animationType'] ?? 'typewriter';
$animation_duration = $attributes['animationDuration'] ?? 1000;
$display_duration = $attributes['displayDuration'] ?? 2000;
$layout = $attributes['layout'] ?? 'row';

// Extract text strings from inner blocks
$text_strings = array();

if ( ! empty( $content ) ) {
	// Parse the saved content to extract text
	$dom = new DOMDocument();
	$dom->loadHTML( '<div>' . $content . '</div>', LIBXML_HTML_NOINFER | LIBXML_HTML_NOIMPLIED );
	
	// Look for spans with the text-animator-item__content class
	$xpath = new DOMXPath( $dom );
	$text_elements = $xpath->query( '//span[@class="text-animator-item__content"]' );
	
	foreach ( $text_elements as $element ) {
		$text_content = trim( $element->textContent );
		if ( ! empty( $text_content ) ) {
			$text_strings[] = $text_content;
		}
	}
	
	// Fallback: if no content elements found, try to extract from any text-animator-item divs
	if ( empty( $text_strings ) ) {
		$item_elements = $xpath->query( '//div[contains(@class, "text-animator-item")]' );
		foreach ( $item_elements as $element ) {
			$text_content = trim( wp_strip_all_tags( $element->textContent ) );
			if ( ! empty( $text_content ) ) {
				$text_strings[] = $text_content;
			}
		}
	}
}

// Remove any empty text strings and re-index
$text_strings = array_values( array_filter( $text_strings, function( $text ) {
	return ! empty( trim( $text ) );
} ) );

// Fallback if no text strings found
if ( empty( $text_strings ) ) {
	$text_strings = array( __( 'Add text items in the editor', 'text-animator' ) );
}

// Prepare data attributes for JavaScript
$data_attrs = array(
	'data-text-strings' => esc_attr( wp_json_encode( $text_strings, JSON_UNESCAPED_UNICODE ) ),
	'data-animation-type' => esc_attr( $animation_type ),
	'data-animation-duration' => esc_attr( $animation_duration ),
	'data-display-duration' => esc_attr( $display_duration ),
);

$wrapper_attributes = get_block_wrapper_attributes( array(
	'class' => 'text-animator text-animator--' . esc_attr( $animation_type ) . ' text-animator--layout-' . esc_attr( $layout ),
) );

// Combine wrapper attributes with data attributes
foreach ( $data_attrs as $key => $value ) {
	$wrapper_attributes .= ' ' . $key . '="' . $value . '"';
}
?>

<div <?php echo $wrapper_attributes; ?>>
	<div class="text-animator__content">
		<?php if ( ! empty( $prefix ) ) : ?>
			<span class="text-animator__prefix"><?php echo esc_html( $prefix ); ?></span>
		<?php endif; ?>
		
		<span class="text-animator__animated-text">
			<?php echo esc_html( $text_strings[0] ?? '' ); ?>
		</span>
		
		<?php if ( ! empty( $suffix ) ) : ?>
			<span class="text-animator__suffix"><?php echo esc_html( $suffix ); ?></span>
		<?php endif; ?>
	</div>
</div>]]></content>
  </file>
  <file path="package.json">
    <description>The AI assistant should only edit 'user_provided_block_name_slug', 'description' and resolve 'isDynamicVariant' in this file and ALWAYS INCLUDE IT. This file includes the necessary scripts for building, formatting, and linting the block code. Dependencies are managed at the workspace level via pnpm.</description>
    <content><![CDATA[
  {
	"name": "text-animator",
	"version": "0.1.0",
	"description": "Create engaging animated text that cycles through different strings with various visual effects.",
	"author": "WordPress Telex",
	"license": "GPL-2.0-or-later",
	"main": "build/index.js",
	"scripts": {
		"build": "wp-scripts build",
		"format": "wp-scripts format",
		"lint:css": "wp-scripts lint-style",
		"lint:js": "wp-scripts lint-js",
		"packages-update": "wp-scripts packages-update",
		"plugin-zip": "wp-scripts plugin-zip",
		"start": "wp-scripts start"
	},
    "devDependencies": {
        "@wordpress/scripts": "^30.15.0"
	}
}
]]></content>
  </file>
  <file path="src/edit-item.js">
    <description>Edit component for individual text animator items.</description>
    <content><![CDATA[import { __ } from '@wordpress/i18n';
import { useBlockProps, RichText } from '@wordpress/block-editor';
import { useEffect, useRef } from '@wordpress/element';
import { createBlock } from '@wordpress/blocks';

/**
 * Edit component for text animator items
 */
export default function EditItem({ attributes, setAttributes, context }) {
	const { text } = attributes;
	const layout = context['textAnimator/layout'] || 'row';
	const richTextRef = useRef();

	const blockProps = useBlockProps({
		ClassName: `text-animator-item text-animator-item--${layout}`
	});

	// Auto-focus when text is empty (new block)
	useEffect(() => {
		if (!text || text.trim() === '') {
			// Small delay to ensure the block is fully rendered
			setTimeout(() => {
				if (richTextRef.current) {
					richTextRef.current.focus();
				}
			}, 100);
		}
	}, []);

	return (
		<div {...blockProps}>
			<RichText
				ref={richTextRef}
				tagName="span"
				value={text}
				onChange={(value) => setAttributes({ text: value })}
				placeholder={__('Enter animated text...', 'text-animator')}
				ClassName="text-animator-item__text"
				allowedFormats={[]} // Plain text only
				onSplit={(value) => {
					// Handle Enter key - create new block
					if (!value) {
						return createBlock('telex/text-animator-item', { text: '' });
					}
					return createBlock('telex/text-animator-item', { text: value });
				})
				onReplace={(blocks) => {
					return blocks;
				})
				onRemove={() => null} // Allow removal
				multiline={false}
				__unstableEmbedURLOnPaste={false}
				__unstableAllowPrefixTransformations={false}
				__unstableDisableFormats={true}
				identifier="text"
				aria-label={__('Animation text', 'text-animator')}
			/>
		</div>
	);
}]]></content>
  </file>
  <file path="src/save-item.js">
    <description>Save component for individual text animator items.</description>
    <content><![CDATA[import { useBlockProps, RichText } from '@wordpress/block-editor';

/**
 * Save component for text animator items
 * This ensures the text content is properly saved to the database
 */
export default function SaveItem({ attributes }) {
	const { text } = attributes;
	
	const blockProps = useBlockProps.save({
		className: 'text-animator-item'
	});

	return (
		<div {...blockProps}>
			<RichText.Content 
				tagName="span"
				className="text-animator-item__content"
				value={text || ''}
			/>
		</div>
	);
}]]></content>
  </file>
</artefact>